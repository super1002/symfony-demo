name: CD

on:
  workflow_dispatch: ~
  push: ~

# In order to use this GitHub Actions file, please define the following secrets:
#  - GKE_PROJECT: Project id of the Google Kubernetes Engine
#  - GKE_SA_KEY: Service Account Key of the Google Kubernetes Engine
#  - CF_API_TOKEN: Cloudflare API token
#  - CF_ZONE_ID: Cloudflare Zone id
env:
  GKE_CLUSTER: api-platform-demo
  GCE_ZONE: europe-west1-c
  CONTAINER_REGISTRY_BASE: eu.gcr.io/${{ secrets.GKE_PROJECT }}
  DOMAIN: api-platform.com
  SUBDOMAIN: demo
  DEFAULT_BRANCH: main

jobs:
  build-php:
    name: Build PHP
    runs-on: ubuntu-latest
    if: github.repository == 'api-platform/demo'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: google-github-actions/setup-gcloud@master
        with:
          # https://github.com/google-github-actions/setup-gcloud/issues/128
          version: '290.0.1'
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}
      - run: gcloud --quiet auth configure-docker
      - run: gcloud container clusters get-credentials $GKE_CLUSTER --zone $GCE_ZONE
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Prepare variables
        id: prepare-variables
        run: |
          TAGS="$CONTAINER_REGISTRY_BASE/php:$GITHUB_SHA_SHORT,$CONTAINER_REGISTRY_BASE/php:$GITHUB_REF_SLUG"
          if [ "${{ github.event_name }}" = "release" ]; then
            TAGS="$TAGS,$CONTAINER_REGISTRY_BASE/php:latest"
          fi
          echo "::set-output name=tags::$TAGS"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./api
          target: api_platform_php
          tags: ${{ steps.prepare-variables.outputs.tags }}
          push: true
          pull: true
          cache-from: |
            ${{ env.CONTAINER_REGISTRY_BASE }}/php:latest
            ${{ env.CONTAINER_REGISTRY_BASE }}/caddy:latest
            ${{ env.CONTAINER_REGISTRY_BASE }}/php:${{ env.GITHUB_REF_SLUG }}
            ${{ env.CONTAINER_REGISTRY_BASE }}/caddy:${{ env.GITHUB_REF_SLUG }}
          cache-to: type=inline

  build-caddy:
    name: Build Caddy
    runs-on: ubuntu-latest
    if: github.repository == 'api-platform/demo'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: google-github-actions/setup-gcloud@master
        with:
          # https://github.com/google-github-actions/setup-gcloud/issues/128
          version: '290.0.1'
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}
      - run: gcloud --quiet auth configure-docker
      - run: gcloud container clusters get-credentials $GKE_CLUSTER --zone $GCE_ZONE
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Prepare variables
        id: prepare-variables
        run: |
          TAGS="$CONTAINER_REGISTRY_BASE/caddy:$GITHUB_SHA_SHORT,$CONTAINER_REGISTRY_BASE/caddy:$GITHUB_REF_SLUG"
          if [ "${{ github.event_name }}" = "release" ]; then
            TAGS="$TAGS,$CONTAINER_REGISTRY_BASE/caddy:latest"
          fi
          echo "::set-output name=tags::$TAGS"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./api
          target: api_platform_caddy
          tags: ${{ steps.prepare-variables.outputs.tags }}
          push: true
          pull: true
          cache-from: |
            ${{ env.CONTAINER_REGISTRY_BASE }}/php:latest
            ${{ env.CONTAINER_REGISTRY_BASE }}/caddy:latest
            ${{ env.CONTAINER_REGISTRY_BASE }}/php:${{ env.GITHUB_REF_SLUG }}
            ${{ env.CONTAINER_REGISTRY_BASE }}/caddy:${{ env.GITHUB_REF_SLUG }}
          cache-to: type=inline

  build-pwa:
    name: Build PWA
    runs-on: ubuntu-latest
    if: github.repository == 'api-platform/demo'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: google-github-actions/setup-gcloud@master
        with:
          # https://github.com/google-github-actions/setup-gcloud/issues/128
          version: '290.0.1'
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}
      - run: gcloud --quiet auth configure-docker
      - run: gcloud container clusters get-credentials $GKE_CLUSTER --zone $GCE_ZONE
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Prepare variables
        id: prepare-variables
        run: |
          TAGS="$CONTAINER_REGISTRY_BASE/pwa:$GITHUB_SHA_SHORT,$CONTAINER_REGISTRY_BASE/pwa:$GITHUB_REF_SLUG"
          if [ "${{ github.event_name }}" = "release" ]; then
            TAGS="$TAGS,$CONTAINER_REGISTRY_BASE/pwa:latest"
          fi
          echo "::set-output name=tags::$TAGS"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./pwa
          target: api_platform_pwa_prod
          tags: ${{ steps.prepare-variables.outputs.tags }}
          push: true
          pull: true
          cache-from: |
            ${{ env.CONTAINER_REGISTRY_BASE }}/pwa:latest
            ${{ env.CONTAINER_REGISTRY_BASE }}/pwa:${{ env.GITHUB_REF_SLUG }}
          cache-to: type=inline

  deploy:
    name: Deploy
    needs: [build-php, build-caddy, build-pwa]
    runs-on: ubuntu-latest
    if: github.repository == 'api-platform/demo'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: google-github-actions/setup-gcloud@master
        with:
          # https://github.com/google-github-actions/setup-gcloud/issues/128
          version: '290.0.1'
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}
      - run: gcloud --quiet auth configure-docker
      - run: gcloud container clusters get-credentials $GKE_CLUSTER --zone $GCE_ZONE
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      # todo Waiting for https://github.com/helm/helm/issues/8036
      - name: Build helm dependencies
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami/
          helm repo add stable https://charts.helm.sh/stable/
          helm dependency build ./helm/api-platform
      - name: Lint Helm
        run: helm lint ./helm/api-platform/
      # Release name MUST start with a letter
      # GitHub doesn't support multilines environment variables (JWT_*_KEY)
      - name: Deploy
        run: |
          if [ "$GITHUB_REF_SLUG" != "$DEFAULT_BRANCH" ]; then
            HOST="$SUBDOMAIN-$GITHUB_REF_SLUG.$DOMAIN"
          else
            HOST="$SUBDOMAIN.$DOMAIN"
          fi
          echo "HOST=$HOST" >> $GITHUB_ENV
          JWT_PASSPHRASE=$(openssl rand -base64 32)
          JWT_SECRET_KEY=$(openssl genpkey -pass file:<(echo "$JWT_PASSPHRASE") -aes256 -algorithm rsa -pkeyopt rsa_keygen_bits:4096)
          JWT_PUBLIC_KEY=$(openssl pkey -in <(echo "$JWT_SECRET_KEY") -passin file:<(echo "$JWT_PASSPHRASE") -pubout)
          if ! kubectl get namespace $GITHUB_REF_SLUG > /dev/null 2>&1; then
            DATABASE_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/")
            helm upgrade $GITHUB_REF_SLUG ./helm/api-platform \
              --install \
              --wait \
              --atomic \
              --namespace=$GITHUB_REF_SLUG --create-namespace \
              --set=php.image.repository=$CONTAINER_REGISTRY_BASE/php \
              --set=php.image.tag=$GITHUB_SHA_SHORT \
              --set=caddy.image.repository=$CONTAINER_REGISTRY_BASE/caddy \
              --set=caddy.image.tag=$GITHUB_SHA_SHORT \
              --set=pwa.image.repository=$CONTAINER_REGISTRY_BASE/pwa \
              --set=pwa.image.tag=$GITHUB_SHA_SHORT \
              --set=ingress.hosts[0].host=$HOST \
              --set=ingress.hosts[0].paths[0].path=/* \
              --set=ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
              --set=external-dns.cloudflare.apiToken=${{ secrets.CF_API_TOKEN }} \
              --set=external-dns.domainFilters={"$DOMAIN"} \
              --set=external-dns.zoneIdFilters={${{ secrets.CF_ZONE_ID }}} \
              --set=php.jwt.secretKey="$JWT_SECRET_KEY" \
              --set=php.jwt.publicKey="$JWT_PUBLIC_KEY" \
              --set=php.jwt.passphrase=$JWT_PASSPHRASE \
              --set=php.corsAllowOrigin="^$(printf '%s' "$HOST" | sed 's/[.[\*^$]/\\&/g')$" \
              --set=php.host=$HOST \
              --set=mercure.publicUrl=https://$HOST/.well-known/mercure \
              --set=mercure.corsAllowedOrigins=https://$HOST \
              --set=postgresql.postgresqlPassword=$DATABASE_PASSWORD
          else
            helm upgrade $GITHUB_REF_SLUG ./helm/api-platform \
              --install \
              --wait \
              --atomic \
              --reuse-values \
              --namespace=$GITHUB_REF_SLUG --create-namespace \
              --set=php.image.repository=$CONTAINER_REGISTRY_BASE/php \
              --set=php.image.tag=$GITHUB_SHA_SHORT \
              --set=caddy.image.repository=$CONTAINER_REGISTRY_BASE/caddy \
              --set=caddy.image.tag=$GITHUB_SHA_SHORT \
              --set=pwa.image.repository=$CONTAINER_REGISTRY_BASE/pwa \
              --set=pwa.image.tag=$GITHUB_SHA_SHORT \
              --set=php.jwt.secretKey="$JWT_SECRET_KEY" \
              --set=php.jwt.publicKey="$JWT_PUBLIC_KEY" \
              --set=php.jwt.passphrase=$JWT_PASSPHRASE
          fi
      - uses: mshick/add-pr-comment@v1
        with:
          message: |
            üöÄ Project successfully deployed at https://${{ env.HOST }}.
            ‚è≥ It may take a few minutes to be available.
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'

name: CI

on:
  push:
    branches:
      - main
  pull_request: ~
  workflow_dispatch: ~

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      PHP_DOCKER_IMAGE: eu.gcr.io/${{ secrets.GKE_PROJECT }}/php:latest
      CADDY_DOCKER_IMAGE: eu.gcr.io/${{ secrets.GKE_PROJECT }}/caddy:latest
      PWA_DOCKER_IMAGE: eu.gcr.io/${{ secrets.GKE_PROJECT }}/pwa:latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build Docker images
        uses: docker/bake-action@v3
        with:
          pull: true
          load: true
          files: |
            docker-compose.yml
            docker-compose.override.yml
          set: |
            *.cache-from=type=gha,scope=${{github.ref}}
            *.cache-from=type=gha,scope=refs/heads/main
            *.cache-to=type=gha,scope=${{github.ref}},mode=max
      -
        name: Start services
        run: docker compose up --wait --no-build
      -
        name: Wait for services
        run: |
          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker compose ps -q php)")"; do
            case $status in
              starting) sleep 1;;
              healthy) exit 0;;
              unhealthy)
                docker compose ps
                docker compose logs
                exit 1
              ;;
            esac
          done
          exit 1
      -
        name: Check HTTP reachability
        run: curl -v -o /dev/null http://localhost
      -
        name: Check API reachability
        run: curl -vk -o /dev/null https://localhost
      -
        name: Check PWA reachability
        run: "curl -vk -o /dev/null -H 'Accept: text/html' https://localhost"
      -
        name: Create test database
        run: |
          docker compose exec -T php bin/console -e test doctrine:database:create
          docker compose exec -T php bin/console -e test doctrine:migrations:migrate --no-interaction
      -
        name: PHPUnit
        run: docker compose exec -T php bin/phpunit
      -
        name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.6.2
      -
        name: Cache playwright binaries
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright
      -
        name: Install Playwright dependencies
        working-directory: pwa
        run: pnpm playwright install
      -
        name: Run Playwright
        working-directory: pwa
        # use 1 worker to prevent conflict between write and read scenarios
        run: pnpm exec playwright test --workers=1
      -
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-screenshots
          path: pwa/test-results
      -
        name: Doctrine Schema Validator
        run: docker compose exec -T php bin/console doctrine:schema:validate
      -
        name: Psalm
        run: docker compose exec -T php vendor/bin/psalm
  lint:
    name: Docker Lint
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Lint Dockerfiles
        uses: hadolint/hadolint-action@v3.1.0
        with:
          recursive: true

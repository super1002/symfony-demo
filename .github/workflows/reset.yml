# Check documentation at https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
name: Deploy

on:
  # Reset production every night at midnight
  schedule:
    - cron: '0 0 * * *'

env:
  GKE_CLUSTER: api-platform-demo
  GCE_ZONE: europe-west1-c
  CONTAINER_REGISTRY_BASE: eu.gcr.io/${{ secrets.GKE_PROJECT }}
  DOMAIN: api-platform.com
  SUBDOMAIN: demo
  DEFAULT_BRANCH: master

jobs:
  deploy-api:
    name: API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2-beta

      # Setup gcloud CLI
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential helper for authentication
      - run: gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - run: gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GCE_ZONE }}

      - name: Generate environment variables for production
        run: |-
          NAMESPACE=${{ env.DEFAULT_BRANCH }}
          echo "::set-env name=API_HOST::${{ env.SUBDOMAIN }}.${{ env.DOMAIN }}"
          echo "::set-env name=MERCURE_HOST::${{ env.SUBDOMAIN }}-mercure.${{ env.DOMAIN }}"
          echo "::set-env name=ADMIN_HOST::${{ env.SUBDOMAIN }}-admin.${{ env.DOMAIN }}"
          echo "::set-env name=CLIENT_HOST::${{ env.SUBDOMAIN }}-client.${{ env.DOMAIN }}"
          echo "::set-env name=CONTAINER_REGISTRY_TAG::latest"
          echo "::set-env name=NAMESPACE::$NAMESPACE"

      - name: Remove namespace
        run: kubectl delete namespace ${{ env.NAMESPACE }}

      - name: Generate Mercure credentials
        run: |-
          npm install --no-package-lock "@clarketm/jwt-cli"
          MERCURE_JWT_KEY=$(openssl rand -base64 32)
          MERCURE_JWT_TOKEN=$(npx jwt sign --noCopy --expiresIn "100 years" '{"mercure": {"publish": ["*"]}}' "$MERCURE_JWT_KEY")
          echo "::add-mask::$MERCURE_JWT_KEY"
          echo "::add-mask::$MERCURE_JWT_TOKEN"
          echo "::set-env name=MERCURE_JWT_KEY::$MERCURE_JWT_KEY"
          echo "::set-env name=MERCURE_JWT_TOKEN::$MERCURE_JWT_TOKEN"

      - name: Create namespace
        run: |-
          cat <<EOF | kubectl create -f -
          {
            "kind": "Namespace",
            "apiVersion": "v1",
            "metadata": {
              "name": "${{ env.NAMESPACE }}",
              "labels": {
                "name": "${{ env.NAMESPACE }}",
                "project": "${{ env.GKE_CLUSTER }}"
              }
            }
          }
          EOF

      - name: Build helm dependencies
        run: helm dependency build ./api/helm/api

      # Cannot set-env JWT_* because GitHub Actions does not support multiline set-env
      - name: Install API
        run: |-
          JWT_PASSPHRASE=$(openssl rand -base64 32)
          JWT_SECRET_KEY=$(openssl genpkey -pass file:<(echo "$JWT_PASSPHRASE") -aes256 -algorithm rsa -pkeyopt rsa_keygen_bits:4096)
          JWT_PUBLIC_KEY=$(openssl pkey -in <(echo "$JWT_SECRET_KEY") -passin file:<(echo "$JWT_PASSPHRASE") -pubout)
          helm install ${{ env.NAMESPACE }} ./api/helm/api \
            --wait \
            --namespace=${{ env.NAMESPACE }} \
            --set php.image.repository=${{ env.CONTAINER_REGISTRY_BASE }}/php,php.image.tag=${{ env.CONTAINER_REGISTRY_TAG }} \
            --set nginx.image.repository=${{ env.CONTAINER_REGISTRY_BASE }}/nginx,nginx.image.tag=${{ env.CONTAINER_REGISTRY_TAG }} \
            --set varnish.image.repository=${{ env.CONTAINER_REGISTRY_BASE }}/varnish,varnish.image.tag=${{ env.CONTAINER_REGISTRY_TAG }} \
            --set php.mercure.jwtToken="${{ env.MERCURE_JWT_TOKEN }}" \
            --set php.jwt.secretKey="$JWT_SECRET_KEY" \
            --set php.jwt.publicKey="$JWT_PUBLIC_KEY" \
            --set php.jwt.passphrase="$JWT_PASSPHRASE" \
            --set mercure.jwtKey="${{ env.MERCURE_JWT_KEY }}" \
            --set mercure.corsAllowedOrigins="https://${{ env.CLIENT_HOST }} https://${{ env.ADMIN_HOST }}" \
            --set ingress.hosts[0].host=${{ env.API_HOST }} \
            --set ingress.hosts[0].paths[0]=/* \
            --set ingress.hosts[1].host=${{ env.MERCURE_HOST }} \
            --set ingress.hosts[1].paths[0]=/* \
            --set blackfire.blackfire.server_id=${{ secrets.BLACKFIRE_SERVER_ID }} \
            --set blackfire.blackfire.server_token=${{ secrets.BLACKFIRE_SERVER_TOKEN }} \
            --set postgresql.postgresqlPassword=$(openssl rand -base64 32 | tr -d "=+/") \
            --set external-dns.cloudflare.apiToken=${{ secrets.CF_API_TOKEN }}
